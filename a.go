// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package test_formats

import (
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"bytes"
	"reflect"
)


func (this *Netbios) fetchInstances() (err error) {
	for i := 0; i < len(this.AnswerName); i++ {
		err = this.AnswerName[i].fetchInstances()
		if err != nil {
			return err
		}
	}
	return err
}

func (this *Netbios) Write() (err error) {
	err = this.WriteSeq(this._io)
	if err != nil {
		return err
	}
	err = this.fetchInstances()
	if err != nil {
		return err
	}
	return this._io.WriteBackChildStreams()
}

func (this *Netbios) WriteSeq(inputIO *kaitai.Stream) (err error) {
	this._io = inputIO

	err = this._io.WriteU2be(uint16(this.TransactionId))
	err = this._io.WriteU2be(uint16(this.Flags))
	err = this._io.WriteU2be(uint16(this.QuestionCount))
	err = this._io.WriteU2be(uint16(this.AnswerCount))
	err = this._io.WriteU2be(uint16(this.AuthorityCount))
	err = this._io.WriteU2be(uint16(this.AdditionalCount))
	err = this._io.WriteBytes(this.Space)
	_ = 1
	byte1Procesed, err := this.Name.Write()
	if err != nil {
		return err
	}
	err = this._io.WriteBytes(byte1Procesed)
	err = this._io.WriteU2be(uint16(this.Type))
	err = this._io.WriteU2be(uint16(this.Class))
	err = this._io.WriteU4be(uint32(this.Ttl))
	err = this._io.WriteU2be(uint16(this.DataLength))
	err = this._io.WriteU1(uint8(this.NumAnswerName))
	for i := 0; i < len(this.AnswerName); i++ {
		err = this.AnswerName[i].WriteSeq(this._io)
		if err != nil {
			return err
		}
	}
	err = this._io.WriteBytes(this.Remain)
	_ = (int((uint16(this.DataLength) - uint16(1))) - int((int8(this.NumAnswerName) * int8(18))))
	return err
}

func (this *Netbios) Check() error {
	if ((len(this.Space)) != int(1)) {
		return kaitai.NewConsistencyError("space", len(this.Space), 1)
	}
	if !(bytes.Equal(this.Space, []uint8{32})) {
		return kaitai.NewValidationNotEqualError([]uint8{32}, this.Space, nil, "/seq/6")
	}
	newBytes2, err := this.Name.Write()
	if err != nil {
		return err
	}
	newBytes2 = newBytes2
	if bytes.IndexByte(newBytes2, 0) == -1 {
		newBytes3, err := this.Name.Write()
		if err != nil {
			return err
		}
		newBytes3 = newBytes3
		return kaitai.NewConsistencyError("name", bytes.IndexByte(newBytes3, 0), -1)
	}
	if ((len(this.AnswerName)) != int(int(this.NumAnswerName))) {
		return kaitai.NewConsistencyError("answer_name", len(this.AnswerName), this.NumAnswerName)
	}
	for i := 0; i < len(this.AnswerName); i++ {
		if !reflect.DeepEqual(this.AnswerName[i]._root, this._root) {
			return kaitai.NewConsistencyError("answer_name", this.AnswerName[i]._root, this._root)
		}
		if !reflect.DeepEqual(this.AnswerName[i]._parent, this) {
			return kaitai.NewConsistencyError("answer_name", this.AnswerName[i]._parent, this)
		}
	}
	if len(this.Remain) != int(int((uint16(this.DataLength) - uint16(1))) - int((int8(this.NumAnswerName) * int8(18)))) {
		return kaitai.NewConsistencyError("remain", len(this.Remain), (int((uint16(this.DataLength) - uint16(1))) - int((int8(this.NumAnswerName) * int8(18)))))
	}
	return nil
}
type Netbios struct {
	kaitai.Stream
	TransactionId uint16
	Flags uint16
	QuestionCount uint16
	AnswerCount uint16
	AuthorityCount uint16
	AdditionalCount uint16
	Space []byte
	Name *kaitai.BytesTerminatedType
	Type uint16
	Class uint16
	Ttl uint32
	DataLength uint16
	NumAnswerName uint8
	AnswerName []*Netbios_Name
	Remain []byte
	_io *kaitai.Stream
	_root *Netbios
	_parent *kaitai.Stream
}

func NewNetbios(_io *kaitai.Stream, _parent *kaitai.Stream, _root *Netbios) *Netbios {
	if _io == nil {
		_io = _parent
	}
	return &Netbios{
		_io: _io, _parent: _parent, _root: _root,
	}
}

func (this *Netbios) SizeOf() (uint64, error) {
	return kaitai.SizeOf(this)
}

func (this *Netbios) Read() (err error) {
	tmp4, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.TransactionId = uint16(tmp4)
	tmp5, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.Flags = uint16(tmp5)
	tmp6, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.QuestionCount = uint16(tmp6)
	tmp7, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.AnswerCount = uint16(tmp7)
	tmp8, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.AuthorityCount = uint16(tmp8)
	tmp9, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.AdditionalCount = uint16(tmp9)
	tmp10, err := this._io.ReadBytes(int(1))
	if err != nil {
		return err
	}
	tmp10 = tmp10
	this.Space = tmp10
	if !(bytes.Equal(this.Space, []uint8{32})) {
		return kaitai.NewValidationNotEqualError([]uint8{32}, this.Space, this._io, "/seq/6")
	}
	tmp11, err := this._io.ReadBytesTerm(0, false, true, true)
	if err != nil {
		return err
	}
	this.Name = this.New_NameTerminatedType(tmp11)
	tmp12, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.Type = uint16(tmp12)
	tmp13, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.Class = uint16(tmp13)
	tmp14, err := this._io.ReadU4be()
	if err != nil {
		return err
	}
	this.Ttl = uint32(tmp14)
	tmp15, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.DataLength = uint16(tmp15)
	tmp16, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NumAnswerName = tmp16
	this.AnswerName = make([]*Netbios_Name, 0)
	for i := 0; i < int(this.NumAnswerName); i++ {
		_ = i
		tmp17 := NewNetbios_Name(this._io, this, this._root)
		err = tmp17.Read()
		if err != nil {
			return err
		}
		this.AnswerName = append(this.AnswerName, tmp17)
	}
	tmp18, err := this._io.ReadBytes(int((int((uint16(this.DataLength) - uint16(1))) - int((int8(this.NumAnswerName) * int8(18))))))
	if err != nil {
		return err
	}
	tmp18 = tmp18
	this.Remain = tmp18
	return err
}

func (this Netbios) New_NameTerminatedType(value []byte) *kaitai.BytesTerminatedType {
	byteType := kaitai.NewBytesTerminatedType(0, false, true, true)
	byteType.Data = value
	return byteType
}

func (this *Netbios) SetTransactionId(_v uint16) { this.TransactionId = _v; }
func (this *Netbios) SetFlags(_v uint16) { this.Flags = _v; }
func (this *Netbios) SetQuestionCount(_v uint16) { this.QuestionCount = _v; }
func (this *Netbios) SetAnswerCount(_v uint16) { this.AnswerCount = _v; }
func (this *Netbios) SetAuthorityCount(_v uint16) { this.AuthorityCount = _v; }
func (this *Netbios) SetAdditionalCount(_v uint16) { this.AdditionalCount = _v; }
func (this *Netbios) SetSpace(_v []byte) { this.Space = _v; }
func (this *Netbios) SetName(_v *kaitai.BytesTerminatedType) { this.Name = _v; }
func (this *Netbios) SetType(_v uint16) { this.Type = _v; }
func (this *Netbios) SetClass(_v uint16) { this.Class = _v; }
func (this *Netbios) SetTtl(_v uint32) { this.Ttl = _v; }
func (this *Netbios) SetDataLength(_v uint16) { this.DataLength = _v; }
func (this *Netbios) SetNumAnswerName(_v uint8) { this.NumAnswerName = _v; }
func (this *Netbios) SetAnswerName(_v []*Netbios_Name) { this.AnswerName = _v; }
func (this *Netbios) SetRemain(_v []byte) { this.Remain = _v; }
func (this *Netbios) Set_io(_v *kaitai.Stream) { this._io = _v; }
func (this *Netbios) Set_root(_v *Netbios) { this._root = _v; }
func (this *Netbios) Set_parent(_v *kaitai.Stream) { this._parent = _v; }

func (this *Netbios_Name) fetchInstances() (err error) {
	return err
}

func (this *Netbios_Name) Write() (err error) {
	err = this.WriteSeq(this._io)
	if err != nil {
		return err
	}
	err = this.fetchInstances()
	if err != nil {
		return err
	}
	return this._io.WriteBackChildStreams()
}

func (this *Netbios_Name) WriteSeq(inputIO *kaitai.Stream) (err error) {
	this._io = inputIO

	err = this._io.WriteBytes([]byte(this.Name))
	_ = 16
	err = this._io.WriteU2be(uint16(this.Flag))
	return err
}

func (this *Netbios_Name) Check() error {
	if ((len([]byte(this.Name))) != int(16)) {
		return kaitai.NewConsistencyError("name", len([]byte(this.Name)), 16)
	}
	return nil
}
type Netbios_Name struct {
	kaitai.Stream
	Name string
	Flag uint16
	_io *kaitai.Stream
	_root *Netbios
	_parent *Netbios
}

func NewNetbios_Name(_io *kaitai.Stream, _parent *Netbios, _root *Netbios) *Netbios_Name {
	if _io == nil {
		_io = _parent._io
	}
	return &Netbios_Name{
		_io: _io, _parent: _parent, _root: _root,
	}
}

func (this *Netbios_Name) SizeOf() (uint64, error) {
	return kaitai.SizeOf(this)
}

func (this *Netbios_Name) Read() (err error) {
	tmp19, err := this._io.ReadBytes(int(16))
	if err != nil {
		return err
	}
	tmp19 = tmp19
	this.Name = string(tmp19)
	tmp20, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.Flag = uint16(tmp20)
	return err
}
func (this *Netbios_Name) SetName(_v string) { this.Name = _v; }
func (this *Netbios_Name) SetFlag(_v uint16) { this.Flag = _v; }
func (this *Netbios_Name) Set_io(_v *kaitai.Stream) { this._io = _v; }
func (this *Netbios_Name) Set_root(_v *Netbios) { this._root = _v; }
func (this *Netbios_Name) Set_parent(_v *Netbios) { this._parent = _v; }

package kaitai

import (
	"bytes"
	"testing"

	"github.com/stretchr/testify/assert"
)

// Declare two struct simulating types generated by Kaitai Struct compiler
type oneStruct struct {
	one int
	_io *Stream
}

func (s *oneStruct) IO_() *Stream {
	return s._io
}

type twoStruct struct {
	two int
	_io *Stream
}

func (s *twoStruct) IO_() *Stream {
	return s._io
}

func WorkWithStruct(t *testing.T, s Struct, expectedSize int) {
	t.Helper()
	actualSize, err := s.IO_().Size()
	assert.Nil(t, err)
	assert.Equal(t, actualSize, int64(expectedSize))
}

func TestKaitaiStruct(t *testing.T) {
	// Instantiate streams for the structs
	oneStream := NewStream(bytes.NewReader([]byte("a quick")))
	twoStream := NewStream(bytes.NewReader([]byte("brown fox")))

	// Instantiate the structs
	one := oneStruct{111, oneStream}
	two := twoStruct{222, twoStream}

	// Check if the structs implement the Struct interface
	WorkWithStruct(t, &one, 7)
	WorkWithStruct(t, &two, 9)
}

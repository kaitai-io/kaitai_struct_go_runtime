package kaitai

import (
	"bytes"
	"testing"
	"github.com/stretchr/testify/assert"
)

// Declare two struct simulating types generated by Kaitai Struct compiler
type oneStruct struct {
	one int
	_io *Stream
}

func (s *oneStruct) Kaitai_IO() *Stream {
	return s._io
}

type twoStruct struct {
	two int
	_io *Stream
}

func (s *twoStruct) Kaitai_IO() *Stream {
	return s._io
}

func WorkWithStruct(s Struct, t *testing.T, expectedSize int) {
	actualSize, err := s.Kaitai_IO().Size()
	assert.Equal(t, actualSize, int64(expectedSize))
	assert.Nil(t, err)
}

func TestKaitaiStruct(t *testing.T) {
	// Instantiate streams for the structs
	oneStream := NewStream(bytes.NewReader([]byte("a")))
	twoStream := NewStream(bytes.NewReader([]byte("ab")))

	// Instantiate the structs
	one := oneStruct{1, oneStream}
	two := twoStruct{2, twoStream}

	// Check if the structs implement the Struct interface
	WorkWithStruct(&one, t, 1)
	WorkWithStruct(&two, t, 2)
}
